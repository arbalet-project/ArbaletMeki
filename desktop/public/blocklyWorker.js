importScripts('charMap.js');

let nbRows;
let nbColumns;
let gridState = [];

let sharedBuffer;
let sharedArray;
let scripts;

onmessage = function (e) {

    switch (e.data.message) {
        case 'gridLength':
            nbRows = e.data.nbRows;
            nbColumns = e.data.nbColumns;
            for (let i = 0; i < nbRows; i++) {
                gridState[i] = [];
            }
            break;

        case 'sharedBuffer':
            sharedBuffer = e.data.buffer;
            sharedArray = new Int32Array(sharedBuffer);
            break;

        case 'scripts':
            scripts = e.data.scripts;
            console.log('received scripts');
            console.table(scripts);
            break;    

        case 'run':
            try {
                eval(scripts['main']);
            } catch (error) {
                console.error(error);
            } finally {
                self.postMessage({
                    message: "close"
                });
                close();
            }
            break;

    }
}

// Functions used by the Javascript code generated by Blockly
function setPixel(rowX, columnY, color) {
    if ((rowX >= 0 && rowX < nbRows) && (columnY >= 0 && columnY < nbColumns)) {
        self.postMessage({
            rowX: rowX,
            columnY: columnY,
            color: color
        });
        gridState[rowX][columnY] = color;
    }
}

function switchOffPixel(rowX, columnY) {
    setPixel(rowX, columnY, '#000000');
}

function switchOffAllPixels() {
    for (let i = 0; i < nbRows; i++) {
        for (let j = 0; j < nbColumns; j++) {
            switchOffPixel(i, j);
        }
    }
}

function setAllPixels(color) {
    for (let i = 0; i < nbRows; i++) {
        for (let j = 0; j < nbColumns; j++) {
            setPixel(i, j, color);
        }
    }
}

function getPixelColor(row, column) {
    return gridState[row][column];
}

function drawLetter(inputLetter, rowX, columnY, color) {
    let letter = inputLetter.charAt(0);
    if (charMap.has(letter)) {
        let letterPixels = charMap.get(letter);
        for (let i = 0; i < letterPixels.length; i = i + 2) {
            setPixel(rowX + letterPixels[i], columnY + letterPixels[i + 1], color);
        }

    }
}

function catchEvent() {
    let eventCatched = Atomics.load(sharedArray,0);
    if(eventCatched != 0){
        Atomics.store(sharedArray,0,0);
        switch(eventCatched){
            case 1: //up
                eval(scripts["up"]);
                break;
            case 2: //right
                eval(scripts["right"]);
                break;
            case 3: //down
                eval(scripts["down"]);
                break;
            case 4:
                eval(scripts["left"]);
        }
    }
}

function sleep(time, unit) {
    if (unit === 's') {
        time = time * 1000;
    }
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
        if ((new Date().getTime() - start) > time) {
            break;
        }
    }
}